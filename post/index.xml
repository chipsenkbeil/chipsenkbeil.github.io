<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Senkbeil</title>
    <link>https://chipsenkbeil.com/post/</link>
    <description>Recent content in Posts on Senkbeil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright &amp;#169; by Chip Senkbeil</copyright>
    <lastBuildDate>Wed, 02 Sep 2015 16:52:27 -0500</lastBuildDate>
    
	<atom:link href="https://chipsenkbeil.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CSS Masonry Layout Attempts</title>
      <link>https://chipsenkbeil.com/post/css-masonry-layout-attempts/</link>
      <pubDate>Wed, 02 Sep 2015 16:52:27 -0500</pubDate>
      
      <guid>https://chipsenkbeil.com/post/css-masonry-layout-attempts/</guid>
      <description>I spent two days investigating this and could not find a solution that worked. Eventually, I gave up and added the Masonry Javascript library. My two attempts were as follows:
Using CSS Columns CSS Columns enabled an easy, powerful way to spread page summaries across multiple columns. Furthermore, you can prevent page summaries from being broken up in the middle by using column-break-inside: avoid;. However, I had no way to order the page summaries dynamically such that the most recent summaries were at the top (from left to right) and older summaries were found further down.</description>
    </item>
    
    <item>
      <title>Overview of the Spark Kernel Client Library</title>
      <link>https://chipsenkbeil.com/post/overview-of-the-spark-kernel-client-library/</link>
      <pubDate>Wed, 29 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chipsenkbeil.com/post/overview-of-the-spark-kernel-client-library/</guid>
      <description>In this third and final part of the Spark Kernel series (part 1, part 2), we will focus on the client library, a Scala-based library used to interface with the Spark Kernel. This library enables Scala applications to quickly communicate with a Spark Kernel without needing to understand ZeroMQ or the IPython message protocol. Furthermore, using the client library, Scala applications are able to treat the Spark Kernel as a remote service, meaning that they can run separately from a Spark cluster and use the kernel as a remote connection into the cluster.</description>
    </item>
    
    <item>
      <title>Spark Kernel Architecture</title>
      <link>https://chipsenkbeil.com/post/spark-kernel-architecture/</link>
      <pubDate>Wed, 22 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chipsenkbeil.com/post/spark-kernel-architecture/</guid>
      <description>In the first part of the Spark Kernel series, we stepped through the problem with enabling interactive applications against Apache Spark and how the Spark Kernel solved this problem. This week, we will focus on the Spark Kernel’s architecture: how we achieve fault tolerance and scalability using Akka, why we chose ZeroMQ with the IPython/Jupyter message protocol, what the layers of functionality are in the kernel (see figure 1 below), and elaborate on an interactive API from IPython called the Comm API.</description>
    </item>
    
    <item>
      <title>How to enable interactive applications against Apache Spark</title>
      <link>https://chipsenkbeil.com/post/how-to-enable-interactive-applications-against-apache-spark/</link>
      <pubDate>Wed, 15 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://chipsenkbeil.com/post/how-to-enable-interactive-applications-against-apache-spark/</guid>
      <description>Last December, IBM open sourced a project called the Spark Kernel, an application focused on interactive usage of Apache Spark. This project addresses a problem we encountered when trying to migrate a Storm-based application to Apache Spark, “How do we enable interactive applications against Apache Spark?”</description>
    </item>
    
    <item>
      <title>tmux with XMonad Bindings</title>
      <link>https://chipsenkbeil.com/post/tmux-with-xmonad-bindings/</link>
      <pubDate>Tue, 24 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://chipsenkbeil.com/post/tmux-with-xmonad-bindings/</guid>
      <description>The Reason I&amp;rsquo;ve been playing around with tmux a lot lately and have come to like it quite a lot for the panes and windows - something I used quite a lot with my XMonad setup on my old Fujitsu laptop. The panes act as my individual terminals with which I can write code, read documentation, chat on IRC (using weechat or irssi), play music, etc. In other words, I do quite a lot from within terminals and being able to split up a terminal into panes (like XMonad launching tiled terminals) is quite nice.</description>
    </item>
    
    <item>
      <title>Design to Embrace Change</title>
      <link>https://chipsenkbeil.com/post/design-to-embrace-change/</link>
      <pubDate>Sat, 26 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://chipsenkbeil.com/post/design-to-embrace-change/</guid>
      <description>So, I&amp;rsquo;ve been reading Practical Object-Oriented Design in Ruby while also watching the VT football game today, something I am beginning to regret. During my freshman and sophomore years at Virginia Tech, I was introduced to quite a few concepts regarding Object Oriented Programming. Mostly, these related to simplistic encapsulation of data - writing setters and getters for any and all variables - as well as using inheritance mixed with interfaces.</description>
    </item>
    
  </channel>
</rss>